---
import { useTranslations } from "src/i18n/utils";
import { getCollection } from "astro:content";
import { type HeaderProps as Props } from '@layouts/header';
import { getEntry } from "astro:content";

/* Collect properties here */
const { header } = Astro.props;
/* Collect lang and tag (if available) */
const { lang, tag } = Astro.params;

/* i18n */
const t = await useTranslations(lang ? lang : 'en');

/* Header title branching */
function title() {
    /* If this is a blog tag search display the tag */
    if(tag) {
        return `${t(`global.tags`)}: ${tag} | ${t(`page.index.page_title`)}`
    }
    /* If there is a provided title then use this one */
    else if(header.title) {
        if(header.title.includes('titles.')) {
            return `${t(header.title)} | ${t('index.page_title')}`
        } else {
            return `${header.title} | ${t('index.page_title')}`
        }
    } 
    /* Otherwise use generic one */
    else {
        return `${t(`index.page_title`)}`
    }
}

/* Meta title */
async function og_title(): Promise<string> {
    const { slug } = Astro.params;
    /* If the page is a blog post then return the title */
    if(slug) {
        const post = await getEntry('blog', slug)
        if(post && post.data) {
            return post.data.title
        }
    }
    /* Else if a specific meta title has been provided, translate it */
    if(header.title) {
        return t(header.title)
    }
    /* Else just generic description */
    return t('global.titlemeta')
}

/* Meta image */
function og_image(): string {
    /* If a dedicated image that is not an svg has been provided then return this image */
    if(header.image && !header.image.includes(".svg") && !header.image.includes(".SVG")) {
        return header.image
    /* Otherwise use generic one */
    } else {
        return "/press-kit/symbols/monero-symbol-on-white-480.png"
    }
}

/* Meta description */
async function og_description(): Promise<string> {
    const { slug } = Astro.params;
    /* If the page is a blog post with a summary then return the summary */
    if(slug) {
        const post = await getEntry('blog', slug)
        if(post && post.data && post.data.summary) {
            return post.data.summary
        }
    }
    /* Else if a specific meta description has been provided, translate it */
    if(header.meta_descr) {
        return t(header.meta_descr)
    }
    /* Else just generic description */
    return t('global.titlemeta')
}
---
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title>
        {title()}
    </title>
    
    <!-- og:title -->
    <meta property="og:title" content={await og_title()} />
    
    <!-- og:description -->
    <meta property="og:description" content={await og_description()} />
    
    <meta name="keywords" content={header.keywords}>
    
    <!-- og:image -->
    <meta property="og:image" content={og_image()} />
    
    <meta property="og:site_name" content={""}>
    <meta property="og:url" content={""}>
    <meta property="og:type" content="website">
    <meta http-equiv="onion-location" content={""} />
    
    <!-- other meta --->
    
    <meta property="og:type" content="website">
    
    <link rel="apple-touch-icon" sizes="180x180" href="/meta/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/meta/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/meta/favicon-16x16.png">
    <link rel="manifest" href="/meta/manifest.json">
    <link rel="mask-icon" href="/meta/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="theme-color" content="#ffffff">
    
    <meta name="msapplication-config" content="/ietemplates/ieconfig.xml">
    
    <!-- Feed autodetection -->
    <link type="application/atom+xml" rel="alternate" href="/feed.xml" title="Monero">
</head>
