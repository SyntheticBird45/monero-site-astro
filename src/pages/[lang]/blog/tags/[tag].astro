---
import { availableLangs } from 'src/i18n/ui';
import { useTranslations } from '../../../../i18n/utils';
import { getCollection } from 'astro:content';
import { sortByPopularity } from '@content/config';

import Base from '@layouts/Base.astro';
import BlogDetails from '@layouts/BlogDetails.astro';
import PostCard from '@components/Blog/PostCard.astro';
import TagTopBar from '@components/Blog/TagTopBar.astro';

// Path for every blog tags
export async function getStaticPaths() {
    
    const blogPosts = await getCollection('blog');
    
    // Collect all tags and sort them by popularity
    var collectedTags: string[] = [];
    blogPosts.forEach((entry) => {
        const tags = entry.data.tag? [entry.data.tag] : entry.data.tags!;
        tags.forEach((tag: string) => {
            collectedTags.push(tag)
        })
    });
    const allTags = sortByPopularity(collectedTags);
    const fourMostPopularTags = allTags.slice(0, 4); // This is the 4 most popular tags
    
    // Collect 5 latest blog post
    const latestBlogPosts = blogPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf()).slice(0, 5);
    
    // Generate static paths
    return allTags.map((tag) => {
        
        // Create a static route for each tags for each languages.
        return Object.keys(availableLangs).map(lang => {
            return { params: { lang, tag }, props: { latest: latestBlogPosts, tags: fourMostPopularTags} }
        });
    }).flat(1);
}

// i18n
const { lang, tag } = Astro.params;
const t = await useTranslations(lang!);

// Sort all blog posts per date.
const allBlogPosts = (await getCollection('blog')).filter((entry) => {
    return entry.data.tag? (entry.data.tag == tag) : entry.data.tags!.includes(tag)
}).sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<Base header={{ 
    title: "titles.blogbytag", 
    on_body: true
    // meta_descr: "meta_descr.blog" 
}}>
    <!-- Post categories selection bar -->
    <TagTopBar />
    
    <!-- List of posts -->
    <BlogDetails {...Astro.props}>
        <div class="full">
            <div class="feed">
                <h2>{tag}</h2>
            </div>
        </div>
        <!-- List of posts --->
        {allBlogPosts.map((post) => (
            <PostCard {...post}></PostCard>
        ))}
    </BlogDetails>

</Base>
